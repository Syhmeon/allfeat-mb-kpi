@echo off
REM Script de d√©marrage rapide Allfeat MusicBrainz KPI (Windows)
REM Usage: quick_start_windows.bat

echo üöÄ D√©marrage rapide Allfeat MusicBrainz KPI
echo =============================================

REM V√©rifier les pr√©requis
echo üìã V√©rification des pr√©requis...

REM V√©rifier Docker
docker --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Docker n'est pas install√©. Veuillez installer Docker Desktop.
    pause
    exit /b 1
)

REM V√©rifier docker-compose
docker-compose --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå docker-compose n'est pas install√©. Veuillez installer docker-compose.
    pause
    exit /b 1
)

echo ‚úÖ Pr√©requis v√©rifi√©s

REM Configuration
set DB_HOST=127.0.0.1
set DB_PORT=5432
set DB_NAME=musicbrainz
set DB_USER=musicbrainz

REM √âtape 1: D√©marrer PostgreSQL
echo üê≥ D√©marrage de PostgreSQL...
docker-compose up -d
if %errorlevel% neq 0 (
    echo ‚ùå Erreur lors du d√©marrage de PostgreSQL
    pause
    exit /b 1
)

echo ‚úÖ PostgreSQL d√©marr√©

REM Attendre que PostgreSQL soit pr√™t
echo ‚è≥ Attente que PostgreSQL soit pr√™t...
timeout /t 10 /nobreak >nul

REM √âtape 2: V√©rifier la connexion
echo üîç V√©rification de la connexion...
docker exec musicbrainz-postgres psql -U %DB_USER% -d %DB_NAME% -c "SELECT version();" >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è  PostgreSQL n'est pas encore pr√™t. Attente suppl√©mentaire...
    timeout /t 15 /nobreak >nul
    docker exec musicbrainz-postgres psql -U %DB_USER% -d %DB_NAME% -c "SELECT version();" >nul 2>&1
    if %errorlevel% neq 0 (
        echo ‚ùå Impossible de se connecter √† PostgreSQL
        pause
        exit /b 1
    )
)

echo ‚úÖ Connexion PostgreSQL r√©ussie

REM √âtape 3: Appliquer le sch√©ma MusicBrainz officiel
echo üìä Application du sch√©ma MusicBrainz officiel...
powershell -ExecutionPolicy Bypass -File scripts/apply_mb_schema.ps1
if %errorlevel% neq 0 (
    echo ‚ùå Erreur lors de l'application du sch√©ma MusicBrainz
    pause
    exit /b 1
)

echo ‚úÖ Sch√©ma MusicBrainz appliqu√©

REM √âtape 4: Importer les donn√©es MusicBrainz
echo üì• Import des donn√©es MusicBrainz...
powershell -ExecutionPolicy Bypass -File scripts/import_mb.ps1
if %errorlevel% neq 0 (
    echo ‚ùå Erreur lors de l'import des donn√©es
    pause
    exit /b 1
)

echo ‚úÖ Donn√©es MusicBrainz import√©es

REM √âtape 5: Appliquer les index MusicBrainz
echo üîß Application des index MusicBrainz...
powershell -ExecutionPolicy Bypass -File scripts/apply_mb_indexes.ps1
if %errorlevel% neq 0 (
    echo ‚ùå Erreur lors de l'application des index
    pause
    exit /b 1
)

echo ‚úÖ Index MusicBrainz appliqu√©s

REM √âtape 6: V√©rifier le sch√©ma MusicBrainz
echo üîç V√©rification du sch√©ma MusicBrainz...
powershell -ExecutionPolicy Bypass -File scripts/verify_mb_schema.ps1
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è  Avertissements lors de la v√©rification du sch√©ma
) else (
    echo ‚úÖ Sch√©ma MusicBrainz v√©rifi√©
)

REM √âtape 7: Cr√©er le sch√©ma KPI
echo üìä Cr√©ation du sch√©ma KPI...
docker exec -i musicbrainz-postgres psql -U %DB_USER% -d %DB_NAME% < sql/init/00_schema.sql
if %errorlevel% neq 0 (
    echo ‚ùå Erreur lors de la cr√©ation du sch√©ma KPI
    pause
    exit /b 1
)

echo ‚úÖ Sch√©ma KPI cr√©√©

REM √âtape 8: Appliquer les vues KPI
echo üîß Application des vues KPI...
powershell -ExecutionPolicy Bypass -File scripts/apply_views.ps1
if %errorlevel% neq 0 (
    echo ‚ùå Erreur lors de l'application des vues
    pause
    exit /b 1
)

echo ‚úÖ Vues KPI appliqu√©es

REM √âtape 9: Tests de validation
echo üß™ Tests de validation...
docker exec -i musicbrainz-postgres psql -U %DB_USER% -d %DB_NAME% < scripts/tests.sql >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les logs.
) else (
    echo ‚úÖ Tests de validation r√©ussis
)

REM R√©sum√© final
echo.
echo üéâ Installation termin√©e!
echo ========================
echo.
echo üìä Informations de connexion:
echo    Host: %DB_HOST%
echo    Port: %DB_PORT%
echo    Database: %DB_NAME%
echo    User: %DB_USER%
echo    Password: musicbrainz
echo.
echo üîó Commandes utiles:
echo    Connexion: docker exec -it musicbrainz-postgres psql -U %DB_USER% -d %DB_NAME%
echo    Tests: docker exec -i musicbrainz-postgres psql -U %DB_USER% -d %DB_NAME% -f scripts/tests.sql
echo.
echo üìã Vues KPI disponibles:
docker exec musicbrainz-postgres psql -U %DB_USER% -d %DB_NAME% -c "SELECT viewname FROM pg_views WHERE schemaname = 'allfeat_kpi' ORDER BY viewname;"
echo.
echo üí° Prochaines √©tapes:
echo    1. Configurer Excel/ODBC (voir excel/PowerQuery_guide.md)
echo    2. Utiliser les vues KPI pour analyser les donn√©es
echo    3. V√©rifier les r√©sultats avec: .\scripts\verify_mb_schema.ps1
echo.
pause
