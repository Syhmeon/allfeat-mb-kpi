# Script d'import MusicBrainz pour Windows PowerShell (via Docker)
# Usage: .\scripts\import_mb.ps1

param(
    [string]$DB_HOST = "127.0.0.1",
    [int]$DB_PORT = 5432,
    [string]$DB_NAME = "musicbrainz",
    [string]$DB_USER = "musicbrainz",
    [string]$DUMPS_DIR = "E:\mbdump",
    [string]$CONTAINER_NAME = "musicbrainz-postgres"
)

Write-Host "üöÄ D√©but de l'import MusicBrainz via Docker..." -ForegroundColor Green

# V√©rifier que le conteneur est en cours d'ex√©cution
Write-Host "üê≥ V√©rification du conteneur $CONTAINER_NAME..." -ForegroundColor Yellow
try {
    $containerStatus = docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}"
    if ([string]::IsNullOrEmpty($containerStatus)) {
        Write-Host "‚ùå Le conteneur $CONTAINER_NAME n'est pas en cours d'ex√©cution." -ForegroundColor Red
        Write-Host "üí° D√©marrez d'abord le conteneur avec: docker-compose up -d" -ForegroundColor Cyan
        exit 1
    }
    Write-Host "‚úÖ Conteneur $CONTAINER_NAME trouv√©: $containerStatus" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification du conteneur Docker." -ForegroundColor Red
    Write-Host "üí° V√©rifiez que Docker Desktop est d√©marr√©." -ForegroundColor Cyan
    exit 1
}

# V√©rifier que PostgreSQL dans le conteneur est accessible
Write-Host "üì° V√©rification de la connexion PostgreSQL dans le conteneur..." -ForegroundColor Yellow
try {
    $result = docker exec $CONTAINER_NAME psql -U $DB_USER -d postgres -c "SELECT 1;" 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Connexion √©chou√©e"
    }
    Write-Host "‚úÖ PostgreSQL accessible dans le conteneur" -ForegroundColor Green
} catch {
    Write-Host "‚ùå PostgreSQL n'est pas accessible dans le conteneur." -ForegroundColor Red
    Write-Host "üí° Attendez que PostgreSQL soit compl√®tement d√©marr√© dans le conteneur." -ForegroundColor Cyan
    exit 1
}

# V√©rifier la pr√©sence du r√©pertoire DUMPS_DIR
Write-Host "üìÅ V√©rification du r√©pertoire $DUMPS_DIR..." -ForegroundColor Yellow
if (-not (Test-Path $DUMPS_DIR)) {
    Write-Host "‚ùå R√©pertoire $DUMPS_DIR introuvable" -ForegroundColor Red
    Write-Host "üí° V√©rifiez le chemin vers vos fichiers MusicBrainz extraits" -ForegroundColor Cyan
    exit 1
}

# Trouver les fichiers MusicBrainz extraits (sans extension)
$dumpFiles = Get-ChildItem -Path $DUMPS_DIR -File | Where-Object { $_.Extension -eq "" }
if ($dumpFiles.Count -eq 0) {
    Write-Host "‚ùå Aucun fichier MusicBrainz trouv√© dans $DUMPS_DIR" -ForegroundColor Red
    Write-Host "üí° V√©rifiez que le r√©pertoire MusicBrainz contient des fichiers sans extension" -ForegroundColor Cyan
    exit 1
}

Write-Host "üì¶ Trouv√© $($dumpFiles.Count) fichiers √† importer depuis $DUMPS_DIR" -ForegroundColor Green

# V√©rifier que le conteneur est d√©marr√© avec le bon montage
Write-Host "üîó V√©rification du montage des volumes..." -ForegroundColor Yellow
try {
    $mountInfo = docker inspect $CONTAINER_NAME --format "{{json .Mounts}}" | ConvertFrom-Json
    $dumpsMountFound = $false
    $correctMount = $false
    
    foreach ($mount in $mountInfo) {
        if ($mount.Destination -eq "/dumps") {
            $dumpsMountFound = $true
            Write-Host "‚úÖ Volume mont√©: $($mount.Source) -> /dumps" -ForegroundColor Green
            
            # V√©rifier si c'est le bon r√©pervoir mont√©
            if ($mount.Source -eq $DUMPS_DIR) {
                $correctMount = $true
                Write-Host "‚úÖ Le bon r√©pertoire est mont√© ($DUMPS_DIR)" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è  Attention: Vous avez mont√© [$($mount.Source)] mais vous voulez importer depuis [$DUMPS_DIR]" -ForegroundColor Yellow
                Write-Host "üí° Solutions possibles:" -ForegroundColor Cyan
                Write-Host "   1. Copiez vos fichiers E:\mbdump vers $($mount.Source)" -ForegroundColor Cyan
                Write-Host "   2. Ou ajustez docker-compose.yml pour monter $DUMPS_DIR vers /dumps" -ForegroundColor Cyan
            }
            break
        }
    }
    
    if (-not $dumpsMountFound) {
        Write-Host "‚ùå Volume /dumps non trouv√© dans le conteneur" -ForegroundColor Red
        Write-Host "üí° D√©marrez le conteneur avec docker-compose up -d (avec un volume mont√© vers /dumps)" -ForegroundColor Cyan
        exit 1
    }
    
    # Avertissement si le montage n'est pas correct
    if (-not $correctMount) {
        Write-Host "" 
        Write-Host "‚ö†Ô∏è  IMPORTANT: Le conteneur doit pouvoir acc√©der aux fichiers MusicBrainz via /dumps" -ForegroundColor Yellow
        Write-Host "üõ†Ô∏è  Solutions:" -ForegroundColor Cyan
        Write-Host "   1. Copiez E:\mbdump\* vers le r√©pertoire local mont√© par Docker" -ForegroundColor Cyan
        Write-Host "   2. Ou modifiez docker-compose.yml:" -ForegroundColor Cyan
        Write-Host "      volumes:" -ForegroundColor Cyan  
        Write-Host "        - E:\mbdump:/dumps:ro" -ForegroundColor Cyan
        Write-Host ""
        
        $response = Read-Host "Continuer quand m√™me ? (y/N)"
        if ($response -ne "y" -and $response -ne "Y") {
            Write-Host "üõë Arr√™t du script" -ForegroundColor Red
            exit 1
        }
    }
} catch {
    Write-Host "‚ö†Ô∏è  Impossible de v√©rifier les montages, continuation..." -ForegroundColor Yellow    
    Write-Host "üí° Assurez-vous que le conteneur peut acc√©der aux fichiers MusicBrainz via /dumps" -ForegroundColor Cyan
}

# Cr√©er la base de donn√©es si elle n'existe pas
Write-Host "üóÑÔ∏è  Cr√©ation de la base de donn√©es..." -ForegroundColor Yellow
try {
    docker exec $CONTAINER_NAME psql -U $DB_USER -d postgres -c "CREATE DATABASE $DB_NAME;" 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Base de donn√©es cr√©√©e" -ForegroundColor Green
    } else {
        Write-Host "‚ÑπÔ∏è  Base de donn√©es existe d√©j√†" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Erreur lors de la cr√©ation de la base de donn√©es" -ForegroundColor Red
    exit 1
}

# Importer chaque fichier MusicBrainz
Write-Host "üì• Import des fichiers MusicBrainz (cela peut prendre plusieurs heures)..." -ForegroundColor Yellow
Write-Host "‚è≥ Cette √©tape peut prendre plusieurs heures selon la taille des fichiers..." -ForegroundColor Cyan

$totalFiles = $dumpFiles.Count
$successCount = 0
$failedFiles = @()

for ($i = 0; $i -lt $totalFiles; $i++) {
    $file = $dumpFiles[$i]
    $fileNumber = $i + 1
    
    Write-Host "üìÑ [$fileNumber/$totalFiles] Import en cours: $($file.Name)..." -ForegroundColor Cyan
    Write-Host "   üìÅ Chemin Windows: $($file.FullName)" -ForegroundColor DarkGray
    Write-Host "   üê≥ Chemin conteneur: /dumps/$($file.Name)" -ForegroundColor DarkGray
    
    try {
        # Utiliser docker exec pour importer le fichier via psql dans le conteneur
        $result = docker exec $CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -f "/dumps/$($file.Name)" 2>&1
        if ($LASTEXITCODE -eq 0) {
            $successCount++
            Write-Host "‚úÖ [$fileNumber/$totalFiles] $($file.Name) import√© avec succ√®s" -ForegroundColor Green
        } else {
            $failedFiles += $file.Name
            Write-Host "‚ùå [$fileNumber/$totalFiles] Erreur lors de l'import de $($file.Name)" -ForegroundColor Red
            Write-Host "   üìù Message d'erreur: $result" -ForegroundColor Red
            Write-Host "   üõë Arr√™t de l'importation..." -ForegroundColor Red
            exit 1
        }
    } catch {
        $failedFiles += $file.Name
        Write-Host "‚ùå [$fileNumber/$totalFiles] Exception lors de l'import de $($file.Name): $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "   üõë Arr√™t de l'importation..." -ForegroundColor Red
        exit 1
    }
}

Write-Host "üìä R√©sum√© de l'importation:" -ForegroundColor Yellow
Write-Host "   ‚úÖ Fichiers import√©s avec succ√®s: $successCount / $totalFiles" -ForegroundColor Green
if ($failedFiles.Count -gt 0) {
    Write-Host "   ‚ùå Fichiers √©chou√©s: $($failedFiles.Count)" -ForegroundColor Red
    Write-Host "   üìã Fichiers probl√©matiques: $($failedFiles -join ', ')" -ForegroundColor Red
    exit 1
}

# Cr√©er les extensions n√©cessaires
Write-Host "üîß Installation des extensions PostgreSQL..." -ForegroundColor Yellow
try {
    docker exec $CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -c @"
CREATE EXTENSION IF NOT EXISTS cube;
CREATE EXTENSION IF NOT EXISTS earthdistance;
"@
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Extensions install√©es avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Avertissement: Erreur lors de l'installation des extensions" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Avertissement: Exception lors de l'installation des extensions" -ForegroundColor Yellow
}

# Analyser les statistiques
Write-Host "üìä Mise √† jour des statistiques..." -ForegroundColor Yellow
try {
    docker exec $CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -c "ANALYZE;"
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Analyse termin√©e" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Avertissement: Erreur lors de l'analyse" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Avertissement: Exception lors de l'analyse" -ForegroundColor Yellow
}

Write-Host "‚úÖ Import MusicBrainz termin√© avec succ√®s!" -ForegroundColor Green
Write-Host "üîç Vous pouvez maintenant cr√©er les vues KPI avec: .\scripts\apply_views.ps1" -ForegroundColor Cyan
Write-Host "üìä Base de donn√©es accessible via le conteneur: $CONTAINER_NAME" -ForegroundColor Cyan