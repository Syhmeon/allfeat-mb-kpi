---
alwaysApply: true
---

# Workflow — Allfeat MusicBrainz KPI (Phase 1, Source of Truth)

## Objectif
Configurer un PostgreSQL local (via MusicBrainz Docker officiel) avec la base MusicBrainz complète, puis créer le schéma `allfeat_kpi` contenant 10 vues KPI pour mesurer la qualité et la complétude des métadonnées.

## Approche technique (mise à jour 2025-10-11)
**Migration vers MusicBrainz Docker officiel (v30)** - Approche recommandée par expert senior  
- Import automatisé et optimisé (2-6h au lieu de 100h+ avec import manuel)  
- Base MusicBrainz complète (375 tables) pré-configurée  
- Fiabilité maximale (battle-tested par la communauté MusicBrainz)  
- Maintenance simplifiée (mises à jour via `docker compose pull`)  
- Documentation : voir `Context_Cursor/Expert_Evaluation.md` pour analyse complète

## KPI
- Couverture ISRC (% enregistrements avec ISRC)  
- Couverture ISWC (% œuvres avec ISWC)  
- Identifiants manquants (ISNI, IPI, VIAF, Wikidata, IMDB)  
- Doublons ISRC  
- Incohérences Work–Recording  
- Niveaux de confiance (Phase 1: High/Medium/Low ; Phase 2: score pondéré 0–1)  

## Public cible
- Data Engineers Allfeat  
- Analystes qualité des métadonnées  
- Parties prenantes business  

## Ordre de lecture Cursor
1) /Context_Cursor/PRD.md  
2) /Context_Cursor/Expert_Evaluation.md (approche technique validée)  
3) /Context_Cursor/Implementation.md (étape active)  
4) /Context_Cursor/Architecture.md (contrats I/O)  
5) /.cursor/rules/30-prompts-base.mdc  
6) /Context_Cursor/Testing.md (si requis)  

## Règles
- Une sous-étape à la fois (définie dans Implementation.md)  
- Lancer `scripts/tests.sql` après modifs  
- Compatibilité Windows/Unix (`.sh` et `.ps1`)  
- Stop si ratio hors [0;1], PK/FK nulles, cartésiens non maîtrisés → log dans /logs/Bug_tracking.md  

---

