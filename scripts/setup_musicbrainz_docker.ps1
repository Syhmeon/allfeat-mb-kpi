# Setup MusicBrainz Docker Official pour KPI Analysis
# Version: 1.0
# Date: 2025-10-11
# Usage: .\scripts\setup_musicbrainz_docker.ps1

param(
    [switch]$SkipEnvCheck = $false,
    [switch]$Force = $false
)

$ErrorActionPreference = "Stop"

Write-Host "üöÄ Setup MusicBrainz Docker Officiel (v30)" -ForegroundColor Green
Write-Host "============================================" -ForegroundColor Green
Write-Host ""

# V√©rifier Docker Desktop
Write-Host "üê≥ V√©rification de Docker Desktop..." -ForegroundColor Yellow
try {
    $dockerVersion = docker version --format '{{.Server.Version}}' 2>$null
    if (-not $dockerVersion) {
        throw "Docker non d√©tect√©"
    }
    Write-Host "‚úÖ Docker version: $dockerVersion" -ForegroundColor Green
    
    $composeVersion = docker compose version --short 2>$null
    Write-Host "‚úÖ Docker Compose version: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Desktop n'est pas d√©marr√©" -ForegroundColor Red
    Write-Host "   Veuillez d√©marrer Docker Desktop et r√©essayer" -ForegroundColor Yellow
    exit 1
}

# V√©rifier l'espace disque
Write-Host ""
Write-Host "üíæ V√©rification de l'espace disque..." -ForegroundColor Yellow
$drive = (Get-Location).Drive
$freeSpace = (Get-PSDrive $drive.Name).Free / 1GB
Write-Host "   Espace libre sur $($drive.Name): : $([math]::Round($freeSpace, 2)) GB" -ForegroundColor Cyan

if ($freeSpace -lt 100) {
    Write-Host "‚ö†Ô∏è  Avertissement: Espace disque faible (<100 GB)" -ForegroundColor Yellow
    Write-Host "   Recommand√©: 100+ GB pour MusicBrainz complet" -ForegroundColor Yellow
    if (-not $Force) {
        $continue = Read-Host "   Continuer quand m√™me? (y/N)"
        if ($continue -ne "y" -and $continue -ne "Y") {
            Write-Host "   Installation annul√©e" -ForegroundColor Red
            exit 1
        }
    }
} else {
    Write-Host "‚úÖ Espace disque suffisant" -ForegroundColor Green
}

# V√©rifier/Cr√©er fichier .env
Write-Host ""
Write-Host "üìù Configuration de l'environnement..." -ForegroundColor Yellow
if (-not (Test-Path ".env") -or $Force) {
    Write-Host "   Cr√©ation du fichier .env depuis env.example..." -ForegroundColor Cyan
    Copy-Item "env.example" ".env" -Force
    Write-Host "‚úÖ Fichier .env cr√©√©" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Fichier .env existe d√©j√†" -ForegroundColor Green
}

# Arr√™ter les conteneurs existants
Write-Host ""
Write-Host "üõë Arr√™t des conteneurs existants..." -ForegroundColor Yellow
try {
    $existing = docker ps -a --filter "name=musicbrainz" --format "{{.Names}}" 2>$null
    if ($existing) {
        Write-Host "   Conteneurs trouv√©s: $existing" -ForegroundColor Cyan
        docker compose down 2>$null
        Write-Host "‚úÖ Conteneurs arr√™t√©s" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ Aucun conteneur existant" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è  Erreur lors de l'arr√™t des conteneurs (ignor√©e)" -ForegroundColor Yellow
}

# Pull de l'image MusicBrainz
Write-Host ""
Write-Host "üì• T√©l√©chargement de l'image MusicBrainz Docker..." -ForegroundColor Yellow
Write-Host "   Cela peut prendre quelques minutes..." -ForegroundColor Cyan
try {
    docker compose pull
    Write-Host "‚úÖ Image t√©l√©charg√©e" -ForegroundColor Green
} catch {
    Write-Host "‚ùå √âchec du t√©l√©chargement de l'image" -ForegroundColor Red
    Write-Host "   V√©rifiez votre connexion Internet et r√©essayez" -ForegroundColor Yellow
    exit 1
}

# D√©marrer les conteneurs
Write-Host ""
Write-Host "üöÄ D√©marrage de MusicBrainz Docker..." -ForegroundColor Yellow
Write-Host "   ‚è≥ L'import initial prendra 2-6 heures" -ForegroundColor Cyan
Write-Host "   üìä Taille finale: ~80 GB" -ForegroundColor Cyan
Write-Host ""
try {
    docker compose up -d
    Write-Host "‚úÖ Conteneurs d√©marr√©s" -ForegroundColor Green
} catch {
    Write-Host "‚ùå √âchec du d√©marrage des conteneurs" -ForegroundColor Red
    Write-Host "   Consultez les logs avec: docker compose logs" -ForegroundColor Yellow
    exit 1
}

# Afficher le statut
Write-Host ""
Write-Host "üìä Statut des conteneurs:" -ForegroundColor Yellow
docker compose ps

# Instructions finales
Write-Host ""
Write-Host "============================================" -ForegroundColor Green
Write-Host "‚úÖ Setup MusicBrainz Docker termin√©!" -ForegroundColor Green
Write-Host "============================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìå Prochaines √©tapes:" -ForegroundColor Cyan
Write-Host ""
Write-Host "1Ô∏è‚É£  Suivre la progression de l'import:" -ForegroundColor White
Write-Host "   docker compose logs -f musicbrainz-db" -ForegroundColor Gray
Write-Host ""
Write-Host "2Ô∏è‚É£  V√©rifier l'√©tat de la base (apr√®s import):" -ForegroundColor White
Write-Host "   docker exec musicbrainz-db psql -U musicbrainz -d musicbrainz_db -c 'SELECT version();'" -ForegroundColor Gray
Write-Host ""
Write-Host "3Ô∏è‚É£  Appliquer les vues KPI (apr√®s import):" -ForegroundColor White
Write-Host "   docker exec -i musicbrainz-db psql -U musicbrainz -d musicbrainz_db < sql/init/00_schema.sql" -ForegroundColor Gray
Write-Host "   .\scripts\apply_views.ps1" -ForegroundColor Gray
Write-Host ""
Write-Host "4Ô∏è‚É£  Lancer les tests:" -ForegroundColor White
Write-Host "   docker exec -i musicbrainz-db psql -U musicbrainz -d musicbrainz_db < scripts/tests.sql" -ForegroundColor Gray
Write-Host ""
Write-Host "‚è±Ô∏è  Estimation de l'import: 2-6 heures" -ForegroundColor Yellow
Write-Host "üíæ Espace utilis√© final: ~80 GB" -ForegroundColor Yellow
Write-Host "üåê Connexion PostgreSQL: localhost:5432" -ForegroundColor Yellow
Write-Host ""
Write-Host "üìö Documentation compl√®te: README.md" -ForegroundColor Cyan
Write-Host ""

