# Script de r√©initialisation de la base MusicBrainz (Windows PowerShell via Docker)
# Usage: .\scripts\reset_mb.ps1

param(
    [string]$DB_HOST = "127.0.0.1",
    [int]$DB_PORT = 5432,
    [string]$DB_NAME = "musicbrainz",
    [string]$DB_USER = "musicbrainz",
    [string]$CONTAINER_NAME = "musicbrainz-postgres"
)

Write-Host "üöÄ R√©initialisation de la base MusicBrainz..." -ForegroundColor Green

# V√©rifier que le conteneur est en cours d'ex√©cution
Write-Host "üê≥ V√©rification du conteneur $CONTAINER_NAME..." -ForegroundColor Yellow
try {
    $containerStatus = docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}"
    if ([string]::IsNullOrEmpty($containerStatus)) {
        Write-Host "‚ùå Le conteneur $CONTAINER_NAME n'est pas en cours d'ex√©cution." -ForegroundColor Red
        Write-Host "üí° D√©marrez d'abord le conteneur avec: docker-compose up -d" -ForegroundColor Cyan
        exit 1
    }
    Write-Host "‚úÖ Conteneur $CONTAINER_NAME trouv√©: $containerStatus" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification du conteneur Docker." -ForegroundColor Red
    Write-Host "üí° V√©rifiez que Docker Desktop est d√©marr√©." -ForegroundColor Cyan
    exit 1
}

# V√©rifier que PostgreSQL dans le conteneur est accessible
Write-Host "üì° V√©rification de la connexion PostgreSQL dans le conteneur..." -ForegroundColor Yellow
try {
    $result = docker exec $CONTAINER_NAME psql -U $DB_USER -d postgres -c "SELECT 1;" 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Connexion √©chou√©e"
    }
    Write-Host "‚úÖ PostgreSQL accessible dans le conteneur" -ForegroundColor Green
} catch {
    Write-Host "‚ùå PostgreSQL n'est pas accessible dans le conteneur." -ForegroundColor Red
    Write-Host "üí° Attendez que PostgreSQL soit compl√®tement d√©marr√© dans le conteneur." -ForegroundColor Cyan
    exit 1
}

# √âtape 1: Supprimer la base de donn√©es si elle existe
Write-Host "üóëÔ∏è  Suppression de la base de donn√©es $DB_NAME..." -ForegroundColor Yellow
try {
    $result = docker exec $CONTAINER_NAME psql -U $DB_USER -d postgres -c "DROP DATABASE IF EXISTS $DB_NAME;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Base de donn√©es $DB_NAME supprim√©e avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Avertissement lors de la suppression: $result" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erreur lors de la suppression de la base de donn√©es: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# √âtape 2: Recr√©er la base de donn√©es
Write-Host "üÜï Cr√©ation de la base de donn√©es $DB_NAME..." -ForegroundColor Yellow
try {
    $result = docker exec $CONTAINER_NAME psql -U $DB_USER -d postgres -c "CREATE DATABASE $DB_NAME;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Base de donn√©es $DB_NAME cr√©√©e avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors de la cr√©ation de la base de donn√©es: $result" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Exception lors de la cr√©ation de la base de donn√©es: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# √âtape 3: Cr√©er la collation ICU musicbrainz
Write-Host "üî§ Cr√©ation de la collation ICU musicbrainz..." -ForegroundColor Yellow
try {
    $collationQuery = "CREATE COLLATION IF NOT EXISTS musicbrainz (provider = icu, locale = 'und-u-ks-level2', deterministic = false);"
    $result = docker exec $CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -c $collationQuery 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Collation ICU musicbrainz cr√©√©e avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Avertissement lors de la cr√©ation de la collation: $result" -ForegroundColor Yellow
        Write-Host "üí° La collation existe peut-√™tre d√©j√† ou il y a un probl√®me de configuration ICU" -ForegroundColor Cyan
    }
} catch {
    Write-Host "‚ö†Ô∏è  Exception lors de la cr√©ation de la collation: $($_.Exception.Message)" -ForegroundColor Yellow
    Write-Host "üí° La collation existe peut-√™tre d√©j√†" -ForegroundColor Cyan
}

# V√©rifier que la base de donn√©es est vide et pr√™te
Write-Host "üîç V√©rification de la base de donn√©es r√©initialis√©e..." -ForegroundColor Yellow
try {
    $result = docker exec $CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>$null
    if ($LASTEXITCODE -eq 0) {
        $tableCount = $result.Trim()
        Write-Host "üìä Nombre de tables dans la base: $tableCount" -ForegroundColor Green
        
        if ([int]$tableCount -eq 0) {
            Write-Host "‚úÖ Base de donn√©es vide et pr√™te pour l'import" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  La base de donn√©es contient $tableCount tables" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå Erreur lors de la v√©rification de la base de donn√©es" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Exception lors de la v√©rification: $($_.Exception.Message)" -ForegroundColor Red
}

# V√©rifier la collation
Write-Host "üî§ V√©rification de la collation musicbrainz..." -ForegroundColor Yellow
try {
    $result = docker exec $CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -c "SELECT collname FROM pg_collation WHERE collname = 'musicbrainz';" 2>$null
    if ($LASTEXITCODE -eq 0) {
        $collationExists = $result.Trim() -ne ""
        if ($collationExists) {
            Write-Host "‚úÖ Collation musicbrainz disponible" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Collation musicbrainz non trouv√©e" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå Erreur lors de la v√©rification de la collation" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Exception lors de la v√©rification de la collation: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "‚úÖ R√©initialisation de la base MusicBrainz termin√©e avec succ√®s!" -ForegroundColor Green
Write-Host "üîç Vous pouvez maintenant appliquer le sch√©ma avec: .\scripts\apply_mb_schema.ps1" -ForegroundColor Cyan
Write-Host "üìä Base de donn√©es pr√™te pour l'import MusicBrainz v30" -ForegroundColor Cyan
